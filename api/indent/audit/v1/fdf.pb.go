// Code generated by protoc-gen-go. DO NOT EDIT.
// source: indent/audit/v1/audit_api.proto

package auditv1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	v1 "github.com/indentinc/indent/api/indent/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WriteRequest struct {
	// Input being written into.
	Input *v1.Input `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	// Async returns immediately and doesn't wait for events to be written.
	Async bool `protobuf:"varint,5,opt,name=async,proto3" json:"async,omitempty"`
	// Events being written.
	Events               []*Event `protobuf:"bytes,20,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteRequest) Reset()         { *m = WriteRequest{} }
func (m *WriteRequest) String() string { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()    {}
func (*WriteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff0992820003f443, []int{0}
}

func (m *WriteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteRequest.Unmarshal(m, b)
}
func (m *WriteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteRequest.Marshal(b, m, deterministic)
}
func (m *WriteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteRequest.Merge(m, src)
}
func (m *WriteRequest) XXX_Size() int {
	return xxx_messageInfo_WriteRequest.Size(m)
}
func (m *WriteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriteRequest proto.InternalMessageInfo

func (m *WriteRequest) GetInput() *v1.Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *WriteRequest) GetAsync() bool {
	if m != nil {
		return m.Async
	}
	return false
}

func (m *WriteRequest) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type WriteEventRequest struct {
	// Name of space containing provider.
	SpaceName string `protobuf:"bytes,1,opt,name=space_name,json=spaceName,proto3" json:"space_name,omitempty"`
	// Name of provider containing Input.
	ProviderName string `protobuf:"bytes,2,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	// Name of Input the event is written to.
	InputName string `protobuf:"bytes,3,opt,name=input_name,json=inputName,proto3" json:"input_name,omitempty"`
	// Event being written.
	Event                *Event   `protobuf:"bytes,4,opt,name=event,proto3" json:"event,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteEventRequest) Reset()         { *m = WriteEventRequest{} }
func (m *WriteEventRequest) String() string { return proto.CompactTextString(m) }
func (*WriteEventRequest) ProtoMessage()    {}
func (*WriteEventRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff0992820003f443, []int{1}
}

func (m *WriteEventRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteEventRequest.Unmarshal(m, b)
}
func (m *WriteEventRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteEventRequest.Marshal(b, m, deterministic)
}
func (m *WriteEventRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteEventRequest.Merge(m, src)
}
func (m *WriteEventRequest) XXX_Size() int {
	return xxx_messageInfo_WriteEventRequest.Size(m)
}
func (m *WriteEventRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteEventRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriteEventRequest proto.InternalMessageInfo

func (m *WriteEventRequest) GetSpaceName() string {
	if m != nil {
		return m.SpaceName
	}
	return ""
}

func (m *WriteEventRequest) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *WriteEventRequest) GetInputName() string {
	if m != nil {
		return m.InputName
	}
	return ""
}

func (m *WriteEventRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type WriteBatchRequest struct {
	// Name of space containing provider.
	SpaceName string `protobuf:"bytes,1,opt,name=space_name,json=spaceName,proto3" json:"space_name,omitempty"`
	// Name of provider containing Input.
	ProviderName string `protobuf:"bytes,2,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	// Name of Input the event is written to.
	InputName string `protobuf:"bytes,3,opt,name=input_name,json=inputName,proto3" json:"input_name,omitempty"`
	// Async returns immediately and doesn't wait for events to be written.
	Async bool `protobuf:"varint,4,opt,name=async,proto3" json:"async,omitempty"`
	// Events being written.
	Events               []*Event `protobuf:"bytes,20,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteBatchRequest) Reset()         { *m = WriteBatchRequest{} }
func (m *WriteBatchRequest) String() string { return proto.CompactTextString(m) }
func (*WriteBatchRequest) ProtoMessage()    {}
func (*WriteBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff0992820003f443, []int{2}
}

func (m *WriteBatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteBatchRequest.Unmarshal(m, b)
}
func (m *WriteBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteBatchRequest.Marshal(b, m, deterministic)
}
func (m *WriteBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteBatchRequest.Merge(m, src)
}
func (m *WriteBatchRequest) XXX_Size() int {
	return xxx_messageInfo_WriteBatchRequest.Size(m)
}
func (m *WriteBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriteBatchRequest proto.InternalMessageInfo

func (m *WriteBatchRequest) GetSpaceName() string {
	if m != nil {
		return m.SpaceName
	}
	return ""
}

func (m *WriteBatchRequest) GetProviderName() string {
	if m != nil {
		return m.ProviderName
	}
	return ""
}

func (m *WriteBatchRequest) GetInputName() string {
	if m != nil {
		return m.InputName
	}
	return ""
}

func (m *WriteBatchRequest) GetAsync() bool {
	if m != nil {
		return m.Async
	}
	return false
}

func (m *WriteBatchRequest) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func init() {
	proto.RegisterType((*WriteRequest)(nil), "indent.audit.v1.WriteRequest")
	proto.RegisterType((*WriteEventRequest)(nil), "indent.audit.v1.WriteEventRequest")
	proto.RegisterType((*WriteBatchRequest)(nil), "indent.audit.v1.WriteBatchRequest")
}

func init() { proto.RegisterFile("indent/audit/v1/audit_api.proto", fileDescriptor_ff0992820003f443) }

var fileDescriptor_ff0992820003f443 = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x92, 0x4f, 0x6e, 0xd3, 0x40,
	0x14, 0xc6, 0xe5, 0xa4, 0x2e, 0xed, 0x6b, 0xab, 0x96, 0xa1, 0x54, 0x51, 0xda, 0x88, 0xc8, 0x48,
	0x28, 0xaa, 0xd0, 0x58, 0x0e, 0x3b, 0x6f, 0x50, 0x02, 0x5d, 0x98, 0x05, 0x8a, 0xbc, 0x28, 0xff,
	0x2a, 0x55, 0x53, 0x67, 0x28, 0x23, 0x91, 0xb1, 0xb1, 0xc7, 0x46, 0x55, 0xc8, 0x86, 0x2b, 0xb4,
	0x27, 0x40, 0xac, 0x38, 0x03, 0x27, 0x60, 0xcb, 0x15, 0x38, 0x08, 0x9a, 0x37, 0x76, 0x13, 0x5a,
	0xbc, 0x01, 0xa9, 0x3b, 0xcf, 0xf7, 0xbe, 0xf1, 0xf7, 0x9b, 0xf7, 0x1e, 0xdc, 0x13, 0x72, 0xcc,
	0xa5, 0x72, 0x59, 0x3e, 0x16, 0xca, 0x2d, 0x3c, 0xf3, 0x71, 0xcc, 0x12, 0x41, 0x93, 0x34, 0x56,
	0x31, 0xd9, 0x34, 0x06, 0x8a, 0x3a, 0x2d, 0xbc, 0xf6, 0xde, 0x69, 0x1c, 0x9f, 0xbe, 0xe7, 0x2e,
	0x4b, 0x84, 0xcb, 0xa4, 0x8c, 0x15, 0x53, 0x22, 0x96, 0x99, 0xb1, 0xb7, 0x77, 0xcb, 0x2a, 0x9e,
	0x4e, 0xf2, 0xb7, 0x2e, 0x9f, 0x24, 0xea, 0xac, 0x2c, 0x5e, 0x0b, 0x4b, 0x79, 0x16, 0xe7, 0x69,
	0xc4, 0xab, 0xdb, 0x7b, 0xa5, 0xa1, 0xf0, 0xf4, 0x0f, 0x0a, 0x31, 0xe6, 0xe9, 0x1c, 0xc5, 0xf9,
	0x04, 0xeb, 0x2f, 0x52, 0xa1, 0x78, 0xc8, 0x3f, 0xe4, 0x3c, 0x53, 0xe4, 0x01, 0xd8, 0x42, 0x26,
	0xb9, 0x6a, 0x59, 0x5d, 0xab, 0xb7, 0xd6, 0xdf, 0xa2, 0x25, 0x6a, 0xe1, 0xd1, 0x40, 0xeb, 0xa1,
	0x29, 0x93, 0x6d, 0xb0, 0x59, 0x76, 0x26, 0xa3, 0x96, 0xdd, 0xb5, 0x7a, 0x2b, 0xa1, 0x39, 0x10,
	0x0a, 0xcb, 0xbc, 0xe0, 0x52, 0x65, 0xad, 0xed, 0x6e, 0xb3, 0xb7, 0xd6, 0xdf, 0xa1, 0x57, 0x5e,
	0x4a, 0x0f, 0x74, 0x39, 0x2c, 0x5d, 0xce, 0x57, 0x0b, 0x6e, 0x63, 0xbc, 0x91, 0x4b, 0x86, 0x0e,
	0x40, 0x96, 0xb0, 0x88, 0x1f, 0x4b, 0x36, 0xe1, 0x08, 0xb2, 0x1a, 0xae, 0xa2, 0xf2, 0x9c, 0x4d,
	0x38, 0xb9, 0x0f, 0x1b, 0x97, 0x0f, 0x41, 0x47, 0x03, 0x1d, 0xeb, 0x95, 0x88, 0xa6, 0x0e, 0x00,
	0x82, 0x1a, 0x47, 0xd3, 0xfc, 0x03, 0x15, 0x2c, 0x3f, 0x04, 0x1b, 0x11, 0x5a, 0x4b, 0xf8, 0xcc,
	0x3a, 0x4e, 0x63, 0x72, 0xbe, 0x57, 0x98, 0x43, 0xa6, 0xa2, 0x77, 0x37, 0x88, 0x79, 0xd9, 0xe5,
	0xa5, 0xff, 0xe8, 0x72, 0xff, 0xa2, 0x09, 0x2b, 0x03, 0x5d, 0x1a, 0x8c, 0x02, 0xf2, 0x06, 0x6c,
	0x7c, 0x0a, 0xe9, 0x5c, 0xbb, 0xb5, 0xb8, 0x08, 0xed, 0x1d, 0x6a, 0xb6, 0x8e, 0x56, 0x5b, 0x47,
	0x0f, 0xf4, 0xd6, 0x39, 0xbb, 0x9f, 0x7f, 0xfe, 0x3a, 0x6f, 0xdc, 0x75, 0xb6, 0xf4, 0x42, 0x4d,
	0x11, 0x95, 0x6a, 0xf8, 0x99, 0x6f, 0xed, 0x93, 0x73, 0x0b, 0x60, 0x3e, 0x4f, 0xe2, 0xfc, 0x3d,
	0x62, 0x71, 0xd8, 0xb5, 0x39, 0x01, 0xe6, 0x3c, 0x71, 0x7c, 0x9d, 0x83, 0x31, 0x99, 0x3b, 0x9d,
	0xf7, 0x7b, 0xe6, 0x4e, 0xff, 0xe8, 0xee, 0xac, 0x64, 0x31, 0x07, 0xff, 0xa3, 0xce, 0xf1, 0xcd,
	0xf8, 0xc8, 0x45, 0x45, 0x85, 0xe3, 0xab, 0xa3, 0x5a, 0x9c, 0x6d, 0x2d, 0xd5, 0x33, 0xa4, 0x7a,
	0xea, 0x3c, 0xfe, 0x77, 0x2a, 0xcc, 0xf1, 0xad, 0xfd, 0xe1, 0x2b, 0xb8, 0x13, 0xc5, 0x93, 0xab,
	0x30, 0xc3, 0x0d, 0x33, 0xaa, 0x44, 0x8c, 0x74, 0xf4, 0xc8, 0x7a, 0x7d, 0x0b, 0x4b, 0x85, 0xf7,
	0xa5, 0xd1, 0x0c, 0x06, 0x2f, 0xbf, 0x35, 0x36, 0x03, 0x73, 0x03, 0x7d, 0xf4, 0xd0, 0xfb, 0x51,
	0x29, 0x47, 0xa8, 0x1c, 0x1d, 0x7a, 0x27, 0xcb, 0x88, 0xfd, 0xe8, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x3b, 0x83, 0x4c, 0x76, 0x8a, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuditAPIClient is the client API for AuditAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuditAPIClient interface {
	// Write a new Event into Indent.
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// WriteEvent a new Event into Indent.
	//
	// Deprecated: Use Write.
	WriteEvent(ctx context.Context, in *WriteEventRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// WriteBatch writes multiple Events into Indent.
	//
	// Deprecated: Use Write.
	WriteBatch(ctx context.Context, in *WriteBatchRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type auditAPIClient struct {
	cc *grpc.ClientConn
}

func NewAuditAPIClient(cc *grpc.ClientConn) AuditAPIClient {
	return &auditAPIClient{cc}
}

func (c *auditAPIClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/indent.audit.v1.AuditAPI/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditAPIClient) WriteEvent(ctx context.Context, in *WriteEventRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/indent.audit.v1.AuditAPI/WriteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auditAPIClient) WriteBatch(ctx context.Context, in *WriteBatchRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/indent.audit.v1.AuditAPI/WriteBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditAPIServer is the server API for AuditAPI service.
type AuditAPIServer interface {
	// Write a new Event into Indent.
	Write(context.Context, *WriteRequest) (*empty.Empty, error)
	// WriteEvent a new Event into Indent.
	//
	// Deprecated: Use Write.
	WriteEvent(context.Context, *WriteEventRequest) (*empty.Empty, error)
	// WriteBatch writes multiple Events into Indent.
	//
	// Deprecated: Use Write.
	WriteBatch(context.Context, *WriteBatchRequest) (*empty.Empty, error)
}

func RegisterAuditAPIServer(s *grpc.Server, srv AuditAPIServer) {
	s.RegisterService(&_AuditAPI_serviceDesc, srv)
}

func _AuditAPI_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditAPIServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indent.audit.v1.AuditAPI/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditAPIServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditAPI_WriteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditAPIServer).WriteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indent.audit.v1.AuditAPI/WriteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditAPIServer).WriteEvent(ctx, req.(*WriteEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuditAPI_WriteBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditAPIServer).WriteBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indent.audit.v1.AuditAPI/WriteBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditAPIServer).WriteBatch(ctx, req.(*WriteBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuditAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "indent.audit.v1.AuditAPI",
	HandlerType: (*AuditAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _AuditAPI_Write_Handler,
		},
		{
			MethodName: "WriteEvent",
			Handler:    _AuditAPI_WriteEvent_Handler,
		},
		{
			MethodName: "WriteBatch",
			Handler:    _AuditAPI_WriteBatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indent/audit/v1/audit_api.proto",
}
