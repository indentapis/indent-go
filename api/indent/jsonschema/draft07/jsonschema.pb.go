// Code generated by protoc-gen-go. DO NOT EDIT.
// source: indent/jsonschema/draft07/jsonschema.proto

package draft07pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	structpb "google.golang.org/protobuf/types/known/structpb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// JSONSchema is an implementation of the JSONSchema draft-07 schema.
//
// The related specifications can be found at https://json-schema.org/draft-07/json-schema-core.html and
// at https://json-schema.org/draft-07/json-schema-validation.html.
type JSONSchema struct {
	// $id defines a URI for the schema, and the base URI that other URI references within the schema are
	// resolved against.
	Id string `protobuf:"bytes,1,opt,name=id,json=$id,proto3" json:"id,omitempty"`
	// $schema keyword is both used as a JSON Schema version identifier and the location of a resource which
	// is itself a JSON Schema, which describes any schema written for this particular version.
	Schema string `protobuf:"bytes,2,opt,name=schema,json=$schema,proto3" json:"schema,omitempty"`
	// $ref keyword is used to reference a schema, and provides the ability to validate recursive structures
	// through self-reference.
	Ref string `protobuf:"bytes,3,opt,name=ref,json=$ref,proto3" json:"ref,omitempty"`
	// $comment keyword is reserved for comments from schema authors to readers or maintainers of the schema.
	// Implementations MUST NOT present this string to end users.
	Comment string `protobuf:"bytes,4,opt,name=comment,json=$comment,proto3" json:"comment,omitempty"`
	// title is a short string used to decorate a user interface with information.
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	// description will provide explanation about the purpose of the instance and is used to decorate a use interface with
	// information.
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// default is used to supply a default JSON value associated with a particular schema. It is RECOMMENDED that a
	// default value be valid against the associated schema.
	Default *structpb.Value `protobuf:"bytes,7,opt,name=default,proto3" json:"default,omitempty"`
	// readOnly indicates that the value of the instance is managed exclusively by the owning authority, and attempts by
	// applications to modify the value of this property are expected to be ignored or rejected by that owning authority.
	ReadOnly bool `protobuf:"varint,8,opt,name=read_only,json=readOnly,proto3" json:"read_only,omitempty"`
	// examples keyword can be used to provide sample JSON values associated with a particular schema, for the purpose of
	// illustrating usage. It is RECOMMENDED that these values be valid against the associated schema.
	Examples []*structpb.Value `protobuf:"bytes,9,rep,name=examples,proto3" json:"examples,omitempty"`
	// minLength MUST be a non-negative integer. A string instance is valid against this keyword if its length is greater
	// than, or equal to, the value of this keyword. The length of a string instance is defined as the number of its
	// characters as defined by RFC 7159.
	MinLength uint64 `protobuf:"varint,16,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
	// items MUST be a valid JSON Schema. This keyword determines how child instances validate for arrays, and does not
	// directly validate the immediate instance itself. Validation succeeds if all elements in the array successfully
	// validate against that schema.
	Items *JSONSchema `protobuf:"bytes,19,opt,name=items,proto3" json:"items,omitempty"`
	// required members MUST be unique. An object instance is valid against this keyword if every item in the array is the
	// name of a property in the instance. Omitting this keyword has the same behavior as an empty array.
	Required []string `protobuf:"bytes,26,rep,name=required,proto3" json:"required,omitempty"`
	// properties MUST have a valid JSON Schema for each value. This keyword determines how child instances validate for
	// objects, and does not directly validate the immediate instance itself. Validation succeeds if, for each name that
	// appears in both the instance and as a name within this keyword's value, the child instance for that name
	// successfully validates against the corresponding schema. Omitting this keyword has the same behavior as an empty
	// object.
	Properties map[string]*JSONSchema `protobuf:"bytes,29,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// type members MUST be unique. An instance validates if and only if the instance is in any of the sets listed for
	// this keyword.
	Type string `protobuf:"bytes,35,opt,name=type,proto3" json:"type,omitempty"`
	// allOf MUST be a non-empty array. Each item of the array MUST be a valid JSON Schema. An instance validates
	// successfully against this keyword if it validates successfully against all schemas defined by this keyword's value.
	AllOf                []*JSONSchema `protobuf:"bytes,42,rep,name=all_of,json=allOf,proto3" json:"all_of,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *JSONSchema) Reset()         { *m = JSONSchema{} }
func (m *JSONSchema) String() string { return proto.CompactTextString(m) }
func (*JSONSchema) ProtoMessage()    {}
func (*JSONSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a040a96e3a2bcb9, []int{0}
}

func (m *JSONSchema) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JSONSchema.Unmarshal(m, b)
}
func (m *JSONSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JSONSchema.Marshal(b, m, deterministic)
}
func (m *JSONSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JSONSchema.Merge(m, src)
}
func (m *JSONSchema) XXX_Size() int {
	return xxx_messageInfo_JSONSchema.Size(m)
}
func (m *JSONSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_JSONSchema.DiscardUnknown(m)
}

var xxx_messageInfo_JSONSchema proto.InternalMessageInfo

func (m *JSONSchema) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *JSONSchema) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *JSONSchema) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *JSONSchema) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *JSONSchema) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *JSONSchema) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *JSONSchema) GetDefault() *structpb.Value {
	if m != nil {
		return m.Default
	}
	return nil
}

func (m *JSONSchema) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

func (m *JSONSchema) GetExamples() []*structpb.Value {
	if m != nil {
		return m.Examples
	}
	return nil
}

func (m *JSONSchema) GetMinLength() uint64 {
	if m != nil {
		return m.MinLength
	}
	return 0
}

func (m *JSONSchema) GetItems() *JSONSchema {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *JSONSchema) GetRequired() []string {
	if m != nil {
		return m.Required
	}
	return nil
}

func (m *JSONSchema) GetProperties() map[string]*JSONSchema {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *JSONSchema) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *JSONSchema) GetAllOf() []*JSONSchema {
	if m != nil {
		return m.AllOf
	}
	return nil
}

func init() {
	proto.RegisterType((*JSONSchema)(nil), "indent.jsonschema.draft07.JSONSchema")
	proto.RegisterMapType((map[string]*JSONSchema)(nil), "indent.jsonschema.draft07.JSONSchema.PropertiesEntry")
}

func init() {
	proto.RegisterFile("indent/jsonschema/draft07/jsonschema.proto", fileDescriptor_4a040a96e3a2bcb9)
}

var fileDescriptor_4a040a96e3a2bcb9 = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcf, 0x6e, 0xd3, 0x4e,
	0x10, 0x96, 0xb3, 0x89, 0xe3, 0x4c, 0x0f, 0xf1, 0x6f, 0x7f, 0x08, 0x36, 0x81, 0x48, 0x16, 0x0d,
	0x52, 0xd4, 0x83, 0x53, 0x15, 0x21, 0x10, 0xe5, 0x54, 0xc1, 0xa1, 0x16, 0x22, 0x91, 0x2b, 0x38,
	0xa0, 0x4a, 0x91, 0x13, 0xaf, 0x53, 0xd3, 0xb5, 0xd7, 0xac, 0x37, 0x08, 0x3f, 0x08, 0x2f, 0xc0,
	0x91, 0x47, 0xe1, 0x41, 0x78, 0x02, 0xfa, 0x9f, 0x03, 0xda, 0x75, 0x92, 0x46, 0xa0, 0xa0, 0x9c,
	0x3e, 0xcf, 0xf7, 0xcd, 0x7c, 0xb3, 0x3b, 0x3b, 0x86, 0x9d, 0x38, 0x0d, 0x69, 0x2a, 0xfb, 0x1f,
	0x72, 0x9e, 0xe6, 0x93, 0x13, 0x9a, 0x04, 0xfd, 0x50, 0x04, 0x91, 0xdc, 0x7d, 0xba, 0x42, 0xb9,
	0x99, 0xe0, 0x92, 0xe3, 0x56, 0x99, 0xeb, 0xae, 0x08, 0xf3, 0xdc, 0xf6, 0x83, 0x29, 0xe7, 0x53,
	0x46, 0xfb, 0x3a, 0x71, 0x3c, 0x8b, 0xfa, 0xb9, 0x14, 0xb3, 0x89, 0x2c, 0x0b, 0x1f, 0xfe, 0xa8,
	0x01, 0x78, 0x47, 0x83, 0x37, 0x47, 0xba, 0x08, 0x37, 0xa1, 0x12, 0x87, 0xc4, 0x70, 0x8c, 0x5e,
	0xc3, 0x47, 0xdd, 0x38, 0xc4, 0xf7, 0xc0, 0x2c, 0xfd, 0x48, 0x45, 0x93, 0xf5, 0x6e, 0x19, 0xe2,
	0xff, 0x00, 0x09, 0x1a, 0x11, 0xa4, 0xd9, 0x6a, 0x57, 0xd0, 0x08, 0xb7, 0xa0, 0x3e, 0xe1, 0x49,
	0x42, 0x53, 0x49, 0xaa, 0x9a, 0xb6, 0xba, 0xf3, 0x18, 0xdf, 0x81, 0x9a, 0x8c, 0x25, 0xa3, 0xa4,
	0xa6, 0x85, 0x32, 0xc0, 0x0e, 0x6c, 0x85, 0x34, 0x9f, 0x88, 0x38, 0x93, 0x31, 0x4f, 0x89, 0xa9,
	0xb5, 0x55, 0x0a, 0xef, 0x42, 0x3d, 0xa4, 0x51, 0x30, 0x63, 0x92, 0xd4, 0x1d, 0xa3, 0xb7, 0xb5,
	0x77, 0xd7, 0x2d, 0xaf, 0xe3, 0x2e, 0xae, 0xe3, 0xbe, 0x0b, 0xd8, 0x8c, 0xfa, 0x8b, 0x34, 0x7c,
	0x1f, 0x1a, 0x82, 0x06, 0xe1, 0x88, 0xa7, 0xac, 0x20, 0x96, 0x63, 0xf4, 0x2c, 0xdf, 0x52, 0xc4,
	0x20, 0x65, 0x05, 0xde, 0x03, 0x8b, 0x7e, 0x0e, 0x92, 0x8c, 0xd1, 0x9c, 0x34, 0x1c, 0xf4, 0x0f,
	0xbf, 0x65, 0x1e, 0xee, 0x00, 0x24, 0x71, 0x3a, 0x62, 0x34, 0x9d, 0xca, 0x13, 0x62, 0x3b, 0x46,
	0xaf, 0xea, 0x37, 0x92, 0x38, 0x7d, 0xad, 0x09, 0xbc, 0x0f, 0xb5, 0x58, 0xd2, 0x24, 0x27, 0xff,
	0xeb, 0xf3, 0x3d, 0x72, 0xd7, 0xbe, 0x84, 0x7b, 0x3b, 0x67, 0xbf, 0xac, 0xc1, 0x6d, 0xb0, 0x04,
	0xfd, 0x38, 0x8b, 0x05, 0x0d, 0x49, 0xdb, 0x41, 0x6a, 0x64, 0x8b, 0x18, 0xbf, 0x05, 0xc8, 0x04,
	0xcf, 0xa8, 0x90, 0x31, 0xcd, 0x49, 0x47, 0x9f, 0xf6, 0xc9, 0x46, 0xee, 0xee, 0x70, 0x59, 0xf7,
	0x2a, 0x95, 0xa2, 0xf0, 0x57, 0x8c, 0x30, 0x86, 0xaa, 0x2c, 0x32, 0x4a, 0xb6, 0xcb, 0x87, 0x53,
	0xdf, 0xf8, 0x05, 0x98, 0x01, 0x63, 0x23, 0x1e, 0x91, 0x1d, 0xdd, 0x66, 0xd3, 0x4b, 0x04, 0x8c,
	0x0d, 0xa2, 0x76, 0x08, 0xcd, 0x3f, 0x1a, 0x62, 0x1b, 0xd0, 0x29, 0x2d, 0x16, 0x7b, 0x74, 0x4a,
	0x0b, 0x35, 0xa6, 0x4f, 0x6a, 0xb0, 0x7a, 0x8d, 0x36, 0xef, 0xa0, 0x6b, 0x9e, 0x57, 0x9e, 0x19,
	0x9e, 0x69, 0xfd, 0x44, 0xf6, 0x19, 0xf2, 0x4c, 0xeb, 0x0c, 0xd9, 0xe7, 0x0a, 0xcf, 0x91, 0x7d,
	0xa1, 0xf0, 0x02, 0xd9, 0x97, 0x0a, 0x2f, 0x91, 0x7d, 0xa5, 0xf0, 0x0a, 0xd9, 0xd7, 0x0a, 0xaf,
	0x91, 0x7d, 0xa3, 0xf0, 0x06, 0xd9, 0xbf, 0xd0, 0xc1, 0x17, 0x03, 0x3a, 0x13, 0x9e, 0xac, 0xef,
	0x7b, 0xd0, 0xf4, 0x96, 0xdc, 0x50, 0x2d, 0xc3, 0xd0, 0x78, 0xbf, 0xbd, 0xf6, 0x17, 0xdc, 0x9f,
	0x63, 0x36, 0xfe, 0x5a, 0x41, 0x87, 0xde, 0xcb, 0x6f, 0x95, 0xd6, 0x61, 0xe9, 0xec, 0xfd, 0xe5,
	0xfc, 0x7d, 0xa1, 0x1d, 0xdf, 0x6a, 0xc7, 0x73, 0x6d, 0x6c, 0xea, 0xc5, 0x7b, 0xfc, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0xf5, 0xe3, 0x4f, 0xaa, 0xee, 0x03, 0x00, 0x00,
}
