// Code generated by protoc-gen-zap-marshaler. DO NOT EDIT.

package log

import (
	fmt "fmt"
	zapcore "go.uber.org/zap/zapcore"
)

func (m *SimpleMessage) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "StringValue" // field stringValue = 1
	oe.AddString(keyName, m.StringValue)

	keyName = "BoolValue" // field boolValue = 2
	oe.AddBool(keyName, m.BoolValue)

	return nil
}

func (m *NotLoggingSimpleMessage) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	return nil
}

func (m *NumberMessage) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "FloatValue" // field floatValue = 1
	oe.AddFloat32(keyName, m.FloatValue)

	keyName = "DoubleValue" // field doubleValue = 2
	oe.AddFloat64(keyName, m.DoubleValue)

	keyName = "Int32Value" // field int32Value = 3
	oe.AddInt32(keyName, m.Int32Value)

	keyName = "Int64Value" // field int64Value = 4
	oe.AddInt64(keyName, m.Int64Value)

	keyName = "Uint32Value" // field uint32Value = 5
	oe.AddUint32(keyName, m.Uint32Value)

	keyName = "Uint64Value" // field uint64Value = 6
	oe.AddUint64(keyName, m.Uint64Value)

	keyName = "Sint32Value" // field sint32Value = 7
	oe.AddInt32(keyName, m.Sint32Value)

	keyName = "Sint64Value" // field sint64Value = 8
	oe.AddInt64(keyName, m.Sint64Value)

	keyName = "Fixed32Value" // field fixed32Value = 9
	oe.AddUint32(keyName, m.Fixed32Value)

	keyName = "Fixed64Value" // field fixed64Value = 10
	oe.AddUint64(keyName, m.Fixed64Value)

	keyName = "Sfixed32Value" // field sfixed32Value = 11
	oe.AddInt32(keyName, m.Sfixed32Value)

	keyName = "Sfixed64Value" // field sfixed64Value = 12
	oe.AddInt64(keyName, m.Sfixed64Value)

	return nil
}

func (m *NotLoggingNumberMessage) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	return nil
}

func (m *RepeatedNumberMessage) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "FloatValues" // field floatValues = 1
	oe.AddArray(keyName, zapcore.ArrayMarshalerFunc(func(ae zapcore.ArrayEncoder) error {
		for _, rv := range m.FloatValues {
			ae.AppendFloat32(rv)
		}
		return nil
	}))

	keyName = "DoubleValues" // field doubleValues = 2
	oe.AddArray(keyName, zapcore.ArrayMarshalerFunc(func(ae zapcore.ArrayEncoder) error {
		for _, rv := range m.DoubleValues {
			ae.AppendFloat64(rv)
		}
		return nil
	}))

	keyName = "Int32Values" // field int32Values = 3
	oe.AddArray(keyName, zapcore.ArrayMarshalerFunc(func(ae zapcore.ArrayEncoder) error {
		for _, rv := range m.Int32Values {
			ae.AppendInt32(rv)
		}
		return nil
	}))

	keyName = "Int64Values" // field int64Values = 4
	oe.AddArray(keyName, zapcore.ArrayMarshalerFunc(func(ae zapcore.ArrayEncoder) error {
		for _, rv := range m.Int64Values {
			ae.AppendInt64(rv)
		}
		return nil
	}))

	keyName = "Uint32Values" // field uint32Values = 5
	oe.AddArray(keyName, zapcore.ArrayMarshalerFunc(func(ae zapcore.ArrayEncoder) error {
		for _, rv := range m.Uint32Values {
			ae.AppendUint32(rv)
		}
		return nil
	}))

	keyName = "Uint64Values" // field uint64Values = 6
	oe.AddArray(keyName, zapcore.ArrayMarshalerFunc(func(ae zapcore.ArrayEncoder) error {
		for _, rv := range m.Uint64Values {
			ae.AppendUint64(rv)
		}
		return nil
	}))

	keyName = "Sint32Values" // field sint32Values = 7
	oe.AddArray(keyName, zapcore.ArrayMarshalerFunc(func(ae zapcore.ArrayEncoder) error {
		for _, rv := range m.Sint32Values {
			ae.AppendInt32(rv)
		}
		return nil
	}))

	keyName = "Sint64Values" // field sint64Values = 8
	oe.AddArray(keyName, zapcore.ArrayMarshalerFunc(func(ae zapcore.ArrayEncoder) error {
		for _, rv := range m.Sint64Values {
			ae.AppendInt64(rv)
		}
		return nil
	}))

	keyName = "Fixed32Values" // field fixed32Values = 9
	oe.AddArray(keyName, zapcore.ArrayMarshalerFunc(func(ae zapcore.ArrayEncoder) error {
		for _, rv := range m.Fixed32Values {
			ae.AppendUint32(rv)
		}
		return nil
	}))

	keyName = "Fixed64Values" // field fixed64Values = 10
	oe.AddArray(keyName, zapcore.ArrayMarshalerFunc(func(ae zapcore.ArrayEncoder) error {
		for _, rv := range m.Fixed64Values {
			ae.AppendUint64(rv)
		}
		return nil
	}))

	keyName = "Sfixed32Values" // field sfixed32Values = 11
	oe.AddArray(keyName, zapcore.ArrayMarshalerFunc(func(ae zapcore.ArrayEncoder) error {
		for _, rv := range m.Sfixed32Values {
			ae.AppendInt32(rv)
		}
		return nil
	}))

	keyName = "Sfixed64Values" // field sfixed64Values = 12
	oe.AddArray(keyName, zapcore.ArrayMarshalerFunc(func(ae zapcore.ArrayEncoder) error {
		for _, rv := range m.Sfixed64Values {
			ae.AppendInt64(rv)
		}
		return nil
	}))

	return nil
}

func (m *NotLoggingRepeatedNumberMessage) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	return nil
}

func (m *NestedMessage) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "NestedValue" // field nestedValue = 1
	if m.NestedValue != nil {
		var vv interface{} = m.NestedValue
		if marshaler, ok := vv.(zapcore.ObjectMarshaler); ok {
			oe.AddObject(keyName, marshaler)
		}
	}

	keyName = "RepeatedNestedValues" // field repeatedNestedValues = 2
	oe.AddArray(keyName, zapcore.ArrayMarshalerFunc(func(ae zapcore.ArrayEncoder) error {
		for _, rv := range m.RepeatedNestedValues {
			if rv != nil {
				var vv interface{} = rv
				if marshaler, ok := vv.(zapcore.ObjectMarshaler); ok {
					ae.AppendObject(marshaler)
				}
			}
		}
		return nil
	}))

	return nil
}

func (m *NestedMessage_Nested) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "Int32Value" // field int32Value = 1
	oe.AddInt32(keyName, m.Int32Value)

	keyName = "StringValue" // field stringValue = 2
	oe.AddString(keyName, m.StringValue)

	return nil
}

func (m *NotLoggingNestedMessage) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	return nil
}

func (m *NotLoggingNestedMessage_Nested) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	return nil
}

func (m *EnumMessage) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "NumericEnumValue" // field numericEnumValue = 1
	oe.AddString(keyName, m.NumericEnumValue.String())

	keyName = "RepeatedNumericEnumValues" // field repeatedNumericEnumValues = 2
	oe.AddArray(keyName, zapcore.ArrayMarshalerFunc(func(ae zapcore.ArrayEncoder) error {
		for _, rv := range m.RepeatedNumericEnumValues {
			ae.AppendString(rv.String())
		}
		return nil
	}))

	keyName = "AliasedEnumValue" // field aliasedEnumValue = 3
	oe.AddString(keyName, m.AliasedEnumValue.String())

	keyName = "NestedEnumValue" // field nestedEnumValue = 4
	oe.AddString(keyName, m.NestedEnumValue.String())

	keyName = "RepeatedNestedEnumValues" // field repeatedNestedEnumValues = 5
	oe.AddArray(keyName, zapcore.ArrayMarshalerFunc(func(ae zapcore.ArrayEncoder) error {
		for _, rv := range m.RepeatedNestedEnumValues {
			ae.AppendString(rv.String())
		}
		return nil
	}))

	return nil
}

func (m *NotLoggingEnumMessage) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	return nil
}

func (m *Oneof) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "Int32Value" // field int32Value = 1
	if val, ok := m.GetOneofValue().(*Oneof_Int32Value); ok {
		oe.AddInt32(keyName, val.Int32Value)
	}

	keyName = "StringValue" // field stringValue = 2
	if val, ok := m.GetOneofValue().(*Oneof_StringValue); ok {
		oe.AddString(keyName, val.StringValue)
	}

	return nil
}

func (m *OneofMessage) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "Int32Value" // field int32Value = 1
	if val, ok := m.GetOneofValue().(*OneofMessage_Int32Value); ok {
		oe.AddInt32(keyName, val.Int32Value)
	}

	keyName = "StringValue" // field stringValue = 2
	if val, ok := m.GetOneofValue().(*OneofMessage_StringValue); ok {
		oe.AddString(keyName, val.StringValue)
	}

	keyName = "RepeatedOneofValues" // field repeatedOneofValues = 3
	oe.AddArray(keyName, zapcore.ArrayMarshalerFunc(func(ae zapcore.ArrayEncoder) error {
		for _, rv := range m.RepeatedOneofValues {
			if rv != nil {
				var vv interface{} = rv
				if marshaler, ok := vv.(zapcore.ObjectMarshaler); ok {
					ae.AppendObject(marshaler)
				}
			}
		}
		return nil
	}))

	return nil
}

func (m *NotLoggingOneofMessage) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	return nil
}

func (m *MapMessage) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "MappedValue" // field mappedValue = 1
	oe.AddObject(keyName, zapcore.ObjectMarshalerFunc(func(oe zapcore.ObjectEncoder) error {
		for mk, mv := range m.MappedValue {
			key := fmt.Sprint(mk)
			oe.AddString(key, mv)
		}
		return nil
	}))

	keyName = "MappedEnumValue" // field mappedEnumValue = 2
	oe.AddObject(keyName, zapcore.ObjectMarshalerFunc(func(oe zapcore.ObjectEncoder) error {
		for mk, mv := range m.MappedEnumValue {
			key := fmt.Sprint(mk)
			oe.AddString(key, mv.String())
		}
		return nil
	}))

	keyName = "MappedNestedValue" // field mappedNestedValue = 3
	oe.AddObject(keyName, zapcore.ObjectMarshalerFunc(func(oe zapcore.ObjectEncoder) error {
		for mk, mv := range m.MappedNestedValue {
			key := fmt.Sprint(mk)
			if mv != nil {
				var vv interface{} = mv
				if marshaler, ok := vv.(zapcore.ObjectMarshaler); ok {
					oe.AddObject(key, marshaler)
				}
			}
		}
		return nil
	}))

	return nil
}

func (m *NotLoggingMapMessage) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	return nil
}

func (m *JsonNameOptionMessage) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "StringValue" // field renamed_value = 1
	oe.AddString(keyName, m.StringValue)

	return nil
}

func (m *NotLoggingJsonNameOptionMessage) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	return nil
}

func (m *WellKnownTypeMessage) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "Duration" // field duration = 1
	d := m.Duration.AsDuration()
	oe.AddDuration(keyName, d)

	keyName = "Timestamp" // field timestamp = 2
	t := m.Timestamp.AsTime()
	oe.AddTime(keyName, t)

	return nil
}

func (m *NotLoggingWellKnownTypeMessage) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	return nil
}

func (m *MixedLoggingMessage) MarshalLogObject(oe zapcore.ObjectEncoder) error {
	var keyName string
	_ = keyName

	if m == nil {
		return nil
	}

	keyName = "StringValue" // field stringValue = 1
	oe.AddString(keyName, m.StringValue)

	return nil
}
