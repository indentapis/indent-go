// Code generated by protoc-gen-go. DO NOT EDIT.
// source: indent/v1/notify_api.proto

package indentv1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
	v1 "multiparty.ai/api/multiparty/prompt/v1"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("indent/v1/notify_api.proto", fileDescriptor_509d2f3e501262c8)
}

var fileDescriptor_509d2f3e501262c8 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4f, 0x4a, 0x03, 0x31,
	0x14, 0xc6, 0x1d, 0x85, 0x42, 0x07, 0x74, 0x11, 0x41, 0x70, 0xec, 0xc6, 0x2e, 0x5c, 0xb8, 0x48,
	0x1c, 0x8b, 0x05, 0xff, 0x2c, 0xb4, 0x22, 0xe2, 0x46, 0x07, 0x5d, 0x08, 0x6e, 0x4a, 0xa6, 0xbe,
	0xb6, 0x81, 0x4e, 0x12, 0x27, 0xc9, 0x48, 0x11, 0x37, 0x5e, 0xc1, 0x3b, 0x08, 0x7a, 0x1d, 0xaf,
	0xe0, 0x41, 0x64, 0x92, 0xb4, 0x16, 0x99, 0x0a, 0xae, 0xe6, 0x85, 0xef, 0xfb, 0x92, 0xdf, 0x7b,
	0xf3, 0xc2, 0x88, 0xf1, 0x7b, 0xe0, 0x9a, 0x14, 0x31, 0xe1, 0x42, 0xb3, 0xfe, 0xb8, 0x4b, 0x25,
	0xc3, 0x32, 0x17, 0x5a, 0xa0, 0xba, 0xd3, 0x70, 0x11, 0x47, 0x8d, 0x81, 0x10, 0x83, 0x11, 0x10,
	0x2a, 0x19, 0xa1, 0x9c, 0x0b, 0x4d, 0x35, 0x13, 0x5c, 0x39, 0x63, 0xb4, 0xe1, 0x55, 0x7b, 0x4a,
	0x4d, 0x9f, 0x40, 0x26, 0xf5, 0xd8, 0x8b, 0x9b, 0x99, 0x19, 0x69, 0x26, 0x69, 0xae, 0xc7, 0xa5,
	0x21, 0x93, 0x33, 0x8f, 0xfd, 0x69, 0x71, 0x95, 0xb3, 0xec, 0xbe, 0x2d, 0x85, 0xf5, 0x4b, 0x9b,
	0x39, 0x49, 0x2e, 0xd0, 0x71, 0x58, 0x73, 0x07, 0xd4, 0xc0, 0x3f, 0x59, 0xec, 0x13, 0x45, 0x8c,
	0x13, 0x5b, 0x45, 0x6b, 0xd8, 0x91, 0xe1, 0x09, 0x19, 0x3e, 0x2b, 0xc9, 0x9a, 0x0b, 0xe8, 0x23,
	0x08, 0x57, 0xcf, 0x41, 0xdf, 0x98, 0x54, 0xf5, 0x72, 0x96, 0xc2, 0x95, 0xb4, 0x0d, 0xa1, 0x9d,
	0xea, 0xfb, 0x2a, 0xac, 0xd7, 0xf0, 0x60, 0x40, 0xe9, 0x68, 0xab, 0x3a, 0xf1, 0xdb, 0xde, 0xdc,
	0x7f, 0xf9, 0xfc, 0x7a, 0x5d, 0x6c, 0xa1, 0x98, 0xcc, 0x74, 0x5b, 0xc4, 0x44, 0x49, 0xda, 0x03,
	0x45, 0x9e, 0xec, 0xb7, 0xcb, 0x69, 0x06, 0xcf, 0x7e, 0x3a, 0x44, 0x78, 0xa8, 0xf7, 0x20, 0x5c,
	0x3f, 0xcd, 0x81, 0x6a, 0xb8, 0x85, 0x34, 0x31, 0x6a, 0xe8, 0x2f, 0xb7, 0x32, 0x6a, 0x57, 0x03,
	0xcc, 0x0d, 0x4c, 0xc0, 0xe7, 0x0d, 0xe7, 0xc8, 0x82, 0xb6, 0x0f, 0x82, 0xed, 0xe6, 0x3f, 0x58,
	0x1f, 0x21, 0x95, 0x46, 0x0d, 0x3b, 0x7b, 0xe1, 0x72, 0x4f, 0x64, 0x78, 0xba, 0x3a, 0x9d, 0x15,
	0xff, 0xdb, 0x24, 0x4b, 0xca, 0x77, 0x92, 0xe0, 0x0e, 0x4d, 0x77, 0xee, 0xd0, 0x55, 0x45, 0x9c,
	0xd6, 0x2c, 0x44, 0xeb, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x08, 0xaa, 0x69, 0x5c, 0x90, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NotifyAPIClient is the client API for NotifyAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NotifyAPIClient interface {
	// Notify sends a message to a space.
	Notify(ctx context.Context, in *v1.Prompt, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get options for subscribing to a space.
	GetSubscribeOptions(ctx context.Context, in *v1.GetSubscribeOptionsRequest, opts ...grpc.CallOption) (*v1.SubscribeOptions, error)
	// Create a new web push subscription for a user.
	CreateWebPushSubscription(ctx context.Context, in *v1.CreateWebPushSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type notifyAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewNotifyAPIClient(cc grpc.ClientConnInterface) NotifyAPIClient {
	return &notifyAPIClient{cc}
}

func (c *notifyAPIClient) Notify(ctx context.Context, in *v1.Prompt, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/indent.v1.NotifyAPI/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyAPIClient) GetSubscribeOptions(ctx context.Context, in *v1.GetSubscribeOptionsRequest, opts ...grpc.CallOption) (*v1.SubscribeOptions, error) {
	out := new(v1.SubscribeOptions)
	err := c.cc.Invoke(ctx, "/indent.v1.NotifyAPI/GetSubscribeOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notifyAPIClient) CreateWebPushSubscription(ctx context.Context, in *v1.CreateWebPushSubscriptionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/indent.v1.NotifyAPI/CreateWebPushSubscription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotifyAPIServer is the server API for NotifyAPI service.
type NotifyAPIServer interface {
	// Notify sends a message to a space.
	Notify(context.Context, *v1.Prompt) (*emptypb.Empty, error)
	// Get options for subscribing to a space.
	GetSubscribeOptions(context.Context, *v1.GetSubscribeOptionsRequest) (*v1.SubscribeOptions, error)
	// Create a new web push subscription for a user.
	CreateWebPushSubscription(context.Context, *v1.CreateWebPushSubscriptionRequest) (*emptypb.Empty, error)
}

// UnimplementedNotifyAPIServer can be embedded to have forward compatible implementations.
type UnimplementedNotifyAPIServer struct {
}

func (*UnimplementedNotifyAPIServer) Notify(ctx context.Context, req *v1.Prompt) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (*UnimplementedNotifyAPIServer) GetSubscribeOptions(ctx context.Context, req *v1.GetSubscribeOptionsRequest) (*v1.SubscribeOptions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscribeOptions not implemented")
}
func (*UnimplementedNotifyAPIServer) CreateWebPushSubscription(ctx context.Context, req *v1.CreateWebPushSubscriptionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebPushSubscription not implemented")
}

func RegisterNotifyAPIServer(s *grpc.Server, srv NotifyAPIServer) {
	s.RegisterService(&_NotifyAPI_serviceDesc, srv)
}

func _NotifyAPI_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.Prompt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyAPIServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indent.v1.NotifyAPI/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyAPIServer).Notify(ctx, req.(*v1.Prompt))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyAPI_GetSubscribeOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetSubscribeOptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyAPIServer).GetSubscribeOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indent.v1.NotifyAPI/GetSubscribeOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyAPIServer).GetSubscribeOptions(ctx, req.(*v1.GetSubscribeOptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotifyAPI_CreateWebPushSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateWebPushSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotifyAPIServer).CreateWebPushSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indent.v1.NotifyAPI/CreateWebPushSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotifyAPIServer).CreateWebPushSubscription(ctx, req.(*v1.CreateWebPushSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NotifyAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "indent.v1.NotifyAPI",
	HandlerType: (*NotifyAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _NotifyAPI_Notify_Handler,
		},
		{
			MethodName: "GetSubscribeOptions",
			Handler:    _NotifyAPI_GetSubscribeOptions_Handler,
		},
		{
			MethodName: "CreateWebPushSubscription",
			Handler:    _NotifyAPI_CreateWebPushSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indent/v1/notify_api.proto",
}
