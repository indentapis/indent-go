// Code generated by protoc-gen-go. DO NOT EDIT.
// source: indent/v1/petition_api.proto

package indentv1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	v1 "go.indent.com/indent-go/api/indent/audit/v1"
	_ "go.indent.com/indent-go/api/indent/log"
	_ "go.indent.com/indent-go/api/indent/sql"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ListPetitionsRequest struct {
	// Name of space containing Petitions.
	SpaceName string `protobuf:"bytes,1,opt,name=space_name,json=spaceName,proto3" json:"space_name,omitempty"`
	// Among constrains listed petitions by name.
	Among []string `protobuf:"bytes,4,rep,name=among,proto3" json:"among,omitempty"`
	// Full returns Petitions with all fields populated.
	Full bool `protobuf:"varint,7,opt,name=full,proto3" json:"full,omitempty"`
	// LabelSelector specifies which petitions should be returned.
	LabelSelector string `protobuf:"bytes,10,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	// Max number of Petitions to be returned.
	PageSize int32 `protobuf:"varint,50,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token for current page position for this list of Petitions.
	PageToken string `protobuf:"bytes,55,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Ascending sorts petitions by timestamp
	Ascending            bool     `protobuf:"varint,60,opt,name=ascending,proto3" json:"ascending,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPetitionsRequest) Reset()         { *m = ListPetitionsRequest{} }
func (m *ListPetitionsRequest) String() string { return proto.CompactTextString(m) }
func (*ListPetitionsRequest) ProtoMessage()    {}
func (*ListPetitionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_64a7ea54a08f9769, []int{0}
}

func (m *ListPetitionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPetitionsRequest.Unmarshal(m, b)
}
func (m *ListPetitionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPetitionsRequest.Marshal(b, m, deterministic)
}
func (m *ListPetitionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPetitionsRequest.Merge(m, src)
}
func (m *ListPetitionsRequest) XXX_Size() int {
	return xxx_messageInfo_ListPetitionsRequest.Size(m)
}
func (m *ListPetitionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPetitionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPetitionsRequest proto.InternalMessageInfo

func (m *ListPetitionsRequest) GetSpaceName() string {
	if m != nil {
		return m.SpaceName
	}
	return ""
}

func (m *ListPetitionsRequest) GetAmong() []string {
	if m != nil {
		return m.Among
	}
	return nil
}

func (m *ListPetitionsRequest) GetFull() bool {
	if m != nil {
		return m.Full
	}
	return false
}

func (m *ListPetitionsRequest) GetLabelSelector() string {
	if m != nil {
		return m.LabelSelector
	}
	return ""
}

func (m *ListPetitionsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListPetitionsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListPetitionsRequest) GetAscending() bool {
	if m != nil {
		return m.Ascending
	}
	return false
}

type ListPetitionsResponse struct {
	// Paginated list of Petitions in a space.
	Petitions []*Petition `protobuf:"bytes,1,rep,name=petitions,proto3" json:"petitions,omitempty"`
	// Page cursor for list of Petitions.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPetitionsResponse) Reset()         { *m = ListPetitionsResponse{} }
func (m *ListPetitionsResponse) String() string { return proto.CompactTextString(m) }
func (*ListPetitionsResponse) ProtoMessage()    {}
func (*ListPetitionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_64a7ea54a08f9769, []int{1}
}

func (m *ListPetitionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPetitionsResponse.Unmarshal(m, b)
}
func (m *ListPetitionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPetitionsResponse.Marshal(b, m, deterministic)
}
func (m *ListPetitionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPetitionsResponse.Merge(m, src)
}
func (m *ListPetitionsResponse) XXX_Size() int {
	return xxx_messageInfo_ListPetitionsResponse.Size(m)
}
func (m *ListPetitionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPetitionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPetitionsResponse proto.InternalMessageInfo

func (m *ListPetitionsResponse) GetPetitions() []*Petition {
	if m != nil {
		return m.Petitions
	}
	return nil
}

func (m *ListPetitionsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type GetPetitionRequest struct {
	// Name of space containing Petition.
	SpaceName string `protobuf:"bytes,1,opt,name=space_name,json=spaceName,proto3" json:"space_name,omitempty"`
	// Petition to retrieve.
	PetitionName         string   `protobuf:"bytes,2,opt,name=petition_name,json=petitionName,proto3" json:"petition_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPetitionRequest) Reset()         { *m = GetPetitionRequest{} }
func (m *GetPetitionRequest) String() string { return proto.CompactTextString(m) }
func (*GetPetitionRequest) ProtoMessage()    {}
func (*GetPetitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_64a7ea54a08f9769, []int{2}
}

func (m *GetPetitionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPetitionRequest.Unmarshal(m, b)
}
func (m *GetPetitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPetitionRequest.Marshal(b, m, deterministic)
}
func (m *GetPetitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPetitionRequest.Merge(m, src)
}
func (m *GetPetitionRequest) XXX_Size() int {
	return xxx_messageInfo_GetPetitionRequest.Size(m)
}
func (m *GetPetitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPetitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPetitionRequest proto.InternalMessageInfo

func (m *GetPetitionRequest) GetSpaceName() string {
	if m != nil {
		return m.SpaceName
	}
	return ""
}

func (m *GetPetitionRequest) GetPetitionName() string {
	if m != nil {
		return m.PetitionName
	}
	return ""
}

type CreatePetitionRequest struct {
	// Space where Petition should be created.
	SpaceName string `protobuf:"bytes,1,opt,name=space_name,json=spaceName,proto3" json:"space_name,omitempty"`
	// WaitForReviewable doesn't return Petition until it can be approved or denied.
	WaitForReviewable bool `protobuf:"varint,20,opt,name=wait_for_reviewable,json=waitForReviewable,proto3" json:"wait_for_reviewable,omitempty"`
	// Petition being created, name is ignored and will be autogenerated.
	Petition             *Petition `protobuf:"bytes,40,opt,name=petition,proto3" json:"petition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreatePetitionRequest) Reset()         { *m = CreatePetitionRequest{} }
func (m *CreatePetitionRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePetitionRequest) ProtoMessage()    {}
func (*CreatePetitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_64a7ea54a08f9769, []int{3}
}

func (m *CreatePetitionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePetitionRequest.Unmarshal(m, b)
}
func (m *CreatePetitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePetitionRequest.Marshal(b, m, deterministic)
}
func (m *CreatePetitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePetitionRequest.Merge(m, src)
}
func (m *CreatePetitionRequest) XXX_Size() int {
	return xxx_messageInfo_CreatePetitionRequest.Size(m)
}
func (m *CreatePetitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePetitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePetitionRequest proto.InternalMessageInfo

func (m *CreatePetitionRequest) GetSpaceName() string {
	if m != nil {
		return m.SpaceName
	}
	return ""
}

func (m *CreatePetitionRequest) GetWaitForReviewable() bool {
	if m != nil {
		return m.WaitForReviewable
	}
	return false
}

func (m *CreatePetitionRequest) GetPetition() *Petition {
	if m != nil {
		return m.Petition
	}
	return nil
}

type UpdatePetitionRequest struct {
	// SpaceName where Petition should be updated.
	SpaceName string `protobuf:"bytes,1,opt,name=space_name,json=spaceName,proto3" json:"space_name,omitempty"`
	// PetitionName is the name of the petition being updated.
	PetitionName string `protobuf:"bytes,3,opt,name=petition_name,json=petitionName,proto3" json:"petition_name,omitempty"`
	// Petition being updated, name is ignored.
	Petition             *Petition `protobuf:"bytes,40,opt,name=petition,proto3" json:"petition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpdatePetitionRequest) Reset()         { *m = UpdatePetitionRequest{} }
func (m *UpdatePetitionRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePetitionRequest) ProtoMessage()    {}
func (*UpdatePetitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_64a7ea54a08f9769, []int{4}
}

func (m *UpdatePetitionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdatePetitionRequest.Unmarshal(m, b)
}
func (m *UpdatePetitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdatePetitionRequest.Marshal(b, m, deterministic)
}
func (m *UpdatePetitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePetitionRequest.Merge(m, src)
}
func (m *UpdatePetitionRequest) XXX_Size() int {
	return xxx_messageInfo_UpdatePetitionRequest.Size(m)
}
func (m *UpdatePetitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePetitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePetitionRequest proto.InternalMessageInfo

func (m *UpdatePetitionRequest) GetSpaceName() string {
	if m != nil {
		return m.SpaceName
	}
	return ""
}

func (m *UpdatePetitionRequest) GetPetitionName() string {
	if m != nil {
		return m.PetitionName
	}
	return ""
}

func (m *UpdatePetitionRequest) GetPetition() *Petition {
	if m != nil {
		return m.Petition
	}
	return nil
}

type DeletePetitionRequest struct {
	// Name of Space containing Petition.
	SpaceName string `protobuf:"bytes,1,opt,name=space_name,json=spaceName,proto3" json:"space_name,omitempty"`
	// Name of the Petition to be deleted.
	PetitionName         string   `protobuf:"bytes,2,opt,name=petition_name,json=petitionName,proto3" json:"petition_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeletePetitionRequest) Reset()         { *m = DeletePetitionRequest{} }
func (m *DeletePetitionRequest) String() string { return proto.CompactTextString(m) }
func (*DeletePetitionRequest) ProtoMessage()    {}
func (*DeletePetitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_64a7ea54a08f9769, []int{5}
}

func (m *DeletePetitionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeletePetitionRequest.Unmarshal(m, b)
}
func (m *DeletePetitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeletePetitionRequest.Marshal(b, m, deterministic)
}
func (m *DeletePetitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeletePetitionRequest.Merge(m, src)
}
func (m *DeletePetitionRequest) XXX_Size() int {
	return xxx_messageInfo_DeletePetitionRequest.Size(m)
}
func (m *DeletePetitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeletePetitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeletePetitionRequest proto.InternalMessageInfo

func (m *DeletePetitionRequest) GetSpaceName() string {
	if m != nil {
		return m.SpaceName
	}
	return ""
}

func (m *DeletePetitionRequest) GetPetitionName() string {
	if m != nil {
		return m.PetitionName
	}
	return ""
}

type StartPetitionRequest struct {
	// Petition being submitted.
	Petition             *Petition `protobuf:"bytes,15,opt,name=petition,proto3" json:"petition,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *StartPetitionRequest) Reset()         { *m = StartPetitionRequest{} }
func (m *StartPetitionRequest) String() string { return proto.CompactTextString(m) }
func (*StartPetitionRequest) ProtoMessage()    {}
func (*StartPetitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_64a7ea54a08f9769, []int{6}
}

func (m *StartPetitionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StartPetitionRequest.Unmarshal(m, b)
}
func (m *StartPetitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StartPetitionRequest.Marshal(b, m, deterministic)
}
func (m *StartPetitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StartPetitionRequest.Merge(m, src)
}
func (m *StartPetitionRequest) XXX_Size() int {
	return xxx_messageInfo_StartPetitionRequest.Size(m)
}
func (m *StartPetitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StartPetitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StartPetitionRequest proto.InternalMessageInfo

func (m *StartPetitionRequest) GetPetition() *Petition {
	if m != nil {
		return m.Petition
	}
	return nil
}

type Petition struct {
	// Name of the Petition.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Space containing Petition.
	SpaceName string `protobuf:"bytes,5,opt,name=space_name,json=spaceName,proto3" json:"space_name,omitempty"`
	// Meta contains metadata about a Petition.
	Meta *v1.Meta `protobuf:"bytes,7,opt,name=meta,proto3" json:"meta,omitempty"`
	// Petitioners are the users initiating the Petition.
	Petitioners []*v1.Resource `protobuf:"bytes,9,rep,name=petitioners,proto3" json:"petitioners,omitempty"`
	// Resources requested as part of the Petition.
	Resources []*v1.Resource `protobuf:"bytes,11,rep,name=resources,proto3" json:"resources,omitempty"`
	// Default duration access is requested for each resource unless otherwise defined.
	DefaultDuration *durationpb.Duration `protobuf:"bytes,19,opt,name=default_duration,json=defaultDuration,proto3" json:"default_duration,omitempty"`
	// Reason the Petition is being made.
	Reason string `protobuf:"bytes,25,opt,name=reason,proto3" json:"reason,omitempty"`
	// Petition's current state. Reflects the State field on its block.
	State *PetitionState `protobuf:"bytes,30,opt,name=state,proto3" json:"state,omitempty"`
	// Block containing the body of the petition.
	Block                *Block   `protobuf:"bytes,50,opt,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Petition) Reset()         { *m = Petition{} }
func (m *Petition) String() string { return proto.CompactTextString(m) }
func (*Petition) ProtoMessage()    {}
func (*Petition) Descriptor() ([]byte, []int) {
	return fileDescriptor_64a7ea54a08f9769, []int{7}
}

func (m *Petition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Petition.Unmarshal(m, b)
}
func (m *Petition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Petition.Marshal(b, m, deterministic)
}
func (m *Petition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Petition.Merge(m, src)
}
func (m *Petition) XXX_Size() int {
	return xxx_messageInfo_Petition.Size(m)
}
func (m *Petition) XXX_DiscardUnknown() {
	xxx_messageInfo_Petition.DiscardUnknown(m)
}

var xxx_messageInfo_Petition proto.InternalMessageInfo

func (m *Petition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Petition) GetSpaceName() string {
	if m != nil {
		return m.SpaceName
	}
	return ""
}

func (m *Petition) GetMeta() *v1.Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *Petition) GetPetitioners() []*v1.Resource {
	if m != nil {
		return m.Petitioners
	}
	return nil
}

func (m *Petition) GetResources() []*v1.Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *Petition) GetDefaultDuration() *durationpb.Duration {
	if m != nil {
		return m.DefaultDuration
	}
	return nil
}

func (m *Petition) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Petition) GetState() *PetitionState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *Petition) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type PetitionState struct {
	// Petition's current status.
	Status *PetitionStatus `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// All audit events emitted for this Petition.
	EventHistory []*v1.Event `protobuf:"bytes,20,rep,name=eventHistory,proto3" json:"eventHistory,omitempty"`
	// Slack messages sent to claimants. Set when Petition has been granted indefinitely.
	Messages             []*CannedMessage `protobuf:"bytes,30,rep,name=messages,proto3" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PetitionState) Reset()         { *m = PetitionState{} }
func (m *PetitionState) String() string { return proto.CompactTextString(m) }
func (*PetitionState) ProtoMessage()    {}
func (*PetitionState) Descriptor() ([]byte, []int) {
	return fileDescriptor_64a7ea54a08f9769, []int{8}
}

func (m *PetitionState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PetitionState.Unmarshal(m, b)
}
func (m *PetitionState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PetitionState.Marshal(b, m, deterministic)
}
func (m *PetitionState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PetitionState.Merge(m, src)
}
func (m *PetitionState) XXX_Size() int {
	return xxx_messageInfo_PetitionState.Size(m)
}
func (m *PetitionState) XXX_DiscardUnknown() {
	xxx_messageInfo_PetitionState.DiscardUnknown(m)
}

var xxx_messageInfo_PetitionState proto.InternalMessageInfo

func (m *PetitionState) GetStatus() *PetitionStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PetitionState) GetEventHistory() []*v1.Event {
	if m != nil {
		return m.EventHistory
	}
	return nil
}

func (m *PetitionState) GetMessages() []*CannedMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

type CannedMessage struct {
	// Slack message channel.
	Channel string `protobuf:"bytes,10,opt,name=channel,proto3" json:"channel,omitempty"`
	// Slack message timestamp.
	Timestamp            string   `protobuf:"bytes,15,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CannedMessage) Reset()         { *m = CannedMessage{} }
func (m *CannedMessage) String() string { return proto.CompactTextString(m) }
func (*CannedMessage) ProtoMessage()    {}
func (*CannedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_64a7ea54a08f9769, []int{9}
}

func (m *CannedMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CannedMessage.Unmarshal(m, b)
}
func (m *CannedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CannedMessage.Marshal(b, m, deterministic)
}
func (m *CannedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CannedMessage.Merge(m, src)
}
func (m *CannedMessage) XXX_Size() int {
	return xxx_messageInfo_CannedMessage.Size(m)
}
func (m *CannedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_CannedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_CannedMessage proto.InternalMessageInfo

func (m *CannedMessage) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *CannedMessage) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type PetitionStatus struct {
	// See pkg/petition/state.go.
	Phase                string   `protobuf:"bytes,10,opt,name=phase,proto3" json:"phase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PetitionStatus) Reset()         { *m = PetitionStatus{} }
func (m *PetitionStatus) String() string { return proto.CompactTextString(m) }
func (*PetitionStatus) ProtoMessage()    {}
func (*PetitionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_64a7ea54a08f9769, []int{10}
}

func (m *PetitionStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PetitionStatus.Unmarshal(m, b)
}
func (m *PetitionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PetitionStatus.Marshal(b, m, deterministic)
}
func (m *PetitionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PetitionStatus.Merge(m, src)
}
func (m *PetitionStatus) XXX_Size() int {
	return xxx_messageInfo_PetitionStatus.Size(m)
}
func (m *PetitionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PetitionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PetitionStatus proto.InternalMessageInfo

func (m *PetitionStatus) GetPhase() string {
	if m != nil {
		return m.Phase
	}
	return ""
}

type ListPetitionClaimsRequest struct {
	// Name of space containing Claim.
	SpaceName string `protobuf:"bytes,13,opt,name=space_name,json=spaceName,proto3" json:"space_name,omitempty"`
	// Name of petition that claims are being made about.
	PetitionName string `protobuf:"bytes,17,opt,name=petition_name,json=petitionName,proto3" json:"petition_name,omitempty"`
	// LabelSelector specifies which Claims should be returned.
	LabelSelector string `protobuf:"bytes,25,opt,name=label_selector,json=labelSelector,proto3" json:"label_selector,omitempty"`
	// Max number of Claims to be returned.
	PageSize int32 `protobuf:"varint,50,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token for current page position for this list of Claims.
	PageToken            string   `protobuf:"bytes,55,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPetitionClaimsRequest) Reset()         { *m = ListPetitionClaimsRequest{} }
func (m *ListPetitionClaimsRequest) String() string { return proto.CompactTextString(m) }
func (*ListPetitionClaimsRequest) ProtoMessage()    {}
func (*ListPetitionClaimsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_64a7ea54a08f9769, []int{11}
}

func (m *ListPetitionClaimsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPetitionClaimsRequest.Unmarshal(m, b)
}
func (m *ListPetitionClaimsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPetitionClaimsRequest.Marshal(b, m, deterministic)
}
func (m *ListPetitionClaimsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPetitionClaimsRequest.Merge(m, src)
}
func (m *ListPetitionClaimsRequest) XXX_Size() int {
	return xxx_messageInfo_ListPetitionClaimsRequest.Size(m)
}
func (m *ListPetitionClaimsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPetitionClaimsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPetitionClaimsRequest proto.InternalMessageInfo

func (m *ListPetitionClaimsRequest) GetSpaceName() string {
	if m != nil {
		return m.SpaceName
	}
	return ""
}

func (m *ListPetitionClaimsRequest) GetPetitionName() string {
	if m != nil {
		return m.PetitionName
	}
	return ""
}

func (m *ListPetitionClaimsRequest) GetLabelSelector() string {
	if m != nil {
		return m.LabelSelector
	}
	return ""
}

func (m *ListPetitionClaimsRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListPetitionClaimsRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

type ListPetitionClaimsResponse struct {
	// Paginated list of Claims in a space for a given petition.
	Claims []*v1.Event `protobuf:"bytes,1,rep,name=claims,proto3" json:"claims,omitempty"`
	// Page cursor for list of Claims.
	NextPageToken        string   `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListPetitionClaimsResponse) Reset()         { *m = ListPetitionClaimsResponse{} }
func (m *ListPetitionClaimsResponse) String() string { return proto.CompactTextString(m) }
func (*ListPetitionClaimsResponse) ProtoMessage()    {}
func (*ListPetitionClaimsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_64a7ea54a08f9769, []int{12}
}

func (m *ListPetitionClaimsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPetitionClaimsResponse.Unmarshal(m, b)
}
func (m *ListPetitionClaimsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPetitionClaimsResponse.Marshal(b, m, deterministic)
}
func (m *ListPetitionClaimsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPetitionClaimsResponse.Merge(m, src)
}
func (m *ListPetitionClaimsResponse) XXX_Size() int {
	return xxx_messageInfo_ListPetitionClaimsResponse.Size(m)
}
func (m *ListPetitionClaimsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPetitionClaimsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPetitionClaimsResponse proto.InternalMessageInfo

func (m *ListPetitionClaimsResponse) GetClaims() []*v1.Event {
	if m != nil {
		return m.Claims
	}
	return nil
}

func (m *ListPetitionClaimsResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

type GetPetitionClaimRequest struct {
	// Name of space containing Claim.
	SpaceName string `protobuf:"bytes,1,opt,name=space_name,json=spaceName,proto3" json:"space_name,omitempty"`
	// Name of petition that claims are being made about.
	PetitionName string `protobuf:"bytes,5,opt,name=petition_name,json=petitionName,proto3" json:"petition_name,omitempty"`
	// Claim to retrieve.
	ClaimName            string   `protobuf:"bytes,20,opt,name=claim_name,json=claimName,proto3" json:"claim_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPetitionClaimRequest) Reset()         { *m = GetPetitionClaimRequest{} }
func (m *GetPetitionClaimRequest) String() string { return proto.CompactTextString(m) }
func (*GetPetitionClaimRequest) ProtoMessage()    {}
func (*GetPetitionClaimRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_64a7ea54a08f9769, []int{13}
}

func (m *GetPetitionClaimRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPetitionClaimRequest.Unmarshal(m, b)
}
func (m *GetPetitionClaimRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPetitionClaimRequest.Marshal(b, m, deterministic)
}
func (m *GetPetitionClaimRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPetitionClaimRequest.Merge(m, src)
}
func (m *GetPetitionClaimRequest) XXX_Size() int {
	return xxx_messageInfo_GetPetitionClaimRequest.Size(m)
}
func (m *GetPetitionClaimRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPetitionClaimRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPetitionClaimRequest proto.InternalMessageInfo

func (m *GetPetitionClaimRequest) GetSpaceName() string {
	if m != nil {
		return m.SpaceName
	}
	return ""
}

func (m *GetPetitionClaimRequest) GetPetitionName() string {
	if m != nil {
		return m.PetitionName
	}
	return ""
}

func (m *GetPetitionClaimRequest) GetClaimName() string {
	if m != nil {
		return m.ClaimName
	}
	return ""
}

type CreatePetitionClaimRequest struct {
	// Space where Claim should be created.
	SpaceName string `protobuf:"bytes,1,opt,name=space_name,json=spaceName,proto3" json:"space_name,omitempty"`
	// Name of petition that claims are being made about.
	PetitionName string `protobuf:"bytes,5,opt,name=petition_name,json=petitionName,proto3" json:"petition_name,omitempty"`
	// Claim being created, name is ignored and will be autogenerated.
	Claim                *v1.Event `protobuf:"bytes,40,opt,name=claim,proto3" json:"claim,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreatePetitionClaimRequest) Reset()         { *m = CreatePetitionClaimRequest{} }
func (m *CreatePetitionClaimRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePetitionClaimRequest) ProtoMessage()    {}
func (*CreatePetitionClaimRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_64a7ea54a08f9769, []int{14}
}

func (m *CreatePetitionClaimRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePetitionClaimRequest.Unmarshal(m, b)
}
func (m *CreatePetitionClaimRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePetitionClaimRequest.Marshal(b, m, deterministic)
}
func (m *CreatePetitionClaimRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePetitionClaimRequest.Merge(m, src)
}
func (m *CreatePetitionClaimRequest) XXX_Size() int {
	return xxx_messageInfo_CreatePetitionClaimRequest.Size(m)
}
func (m *CreatePetitionClaimRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePetitionClaimRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePetitionClaimRequest proto.InternalMessageInfo

func (m *CreatePetitionClaimRequest) GetSpaceName() string {
	if m != nil {
		return m.SpaceName
	}
	return ""
}

func (m *CreatePetitionClaimRequest) GetPetitionName() string {
	if m != nil {
		return m.PetitionName
	}
	return ""
}

func (m *CreatePetitionClaimRequest) GetClaim() *v1.Event {
	if m != nil {
		return m.Claim
	}
	return nil
}

func init() {
	proto.RegisterType((*ListPetitionsRequest)(nil), "indent.v1.ListPetitionsRequest")
	proto.RegisterType((*ListPetitionsResponse)(nil), "indent.v1.ListPetitionsResponse")
	proto.RegisterType((*GetPetitionRequest)(nil), "indent.v1.GetPetitionRequest")
	proto.RegisterType((*CreatePetitionRequest)(nil), "indent.v1.CreatePetitionRequest")
	proto.RegisterType((*UpdatePetitionRequest)(nil), "indent.v1.UpdatePetitionRequest")
	proto.RegisterType((*DeletePetitionRequest)(nil), "indent.v1.DeletePetitionRequest")
	proto.RegisterType((*StartPetitionRequest)(nil), "indent.v1.StartPetitionRequest")
	proto.RegisterType((*Petition)(nil), "indent.v1.Petition")
	proto.RegisterType((*PetitionState)(nil), "indent.v1.PetitionState")
	proto.RegisterType((*CannedMessage)(nil), "indent.v1.CannedMessage")
	proto.RegisterType((*PetitionStatus)(nil), "indent.v1.PetitionStatus")
	proto.RegisterType((*ListPetitionClaimsRequest)(nil), "indent.v1.ListPetitionClaimsRequest")
	proto.RegisterType((*ListPetitionClaimsResponse)(nil), "indent.v1.ListPetitionClaimsResponse")
	proto.RegisterType((*GetPetitionClaimRequest)(nil), "indent.v1.GetPetitionClaimRequest")
	proto.RegisterType((*CreatePetitionClaimRequest)(nil), "indent.v1.CreatePetitionClaimRequest")
}

func init() {
	proto.RegisterFile("indent/v1/petition_api.proto", fileDescriptor_64a7ea54a08f9769)
}

var fileDescriptor_64a7ea54a08f9769 = []byte{
	// 1178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xd6, 0x26, 0x71, 0x6a, 0x3f, 0xd7, 0x49, 0x3a, 0x71, 0xca, 0xda, 0xe4, 0x87, 0xd9, 0x90,
	0xca, 0x8d, 0x22, 0xaf, 0x9c, 0x56, 0x14, 0x42, 0x2b, 0xd1, 0x24, 0x25, 0x44, 0x22, 0x28, 0xda,
	0xd0, 0x2a, 0x02, 0x24, 0x6b, 0x62, 0xbf, 0xb8, 0xab, 0xae, 0x77, 0xb7, 0x3b, 0xe3, 0x14, 0x9a,
	0xe6, 0x52, 0x89, 0x1b, 0x42, 0x42, 0x08, 0x71, 0xe0, 0xc6, 0x91, 0xbf, 0x00, 0x71, 0xec, 0x91,
	0x2b, 0x97, 0x1e, 0x39, 0xf0, 0x87, 0xa0, 0x9d, 0x99, 0xb5, 0x77, 0xe3, 0x35, 0xf9, 0x41, 0x0f,
	0x96, 0x76, 0xbf, 0xf9, 0xe6, 0xbd, 0xef, 0xbd, 0x37, 0xfb, 0xde, 0x18, 0x66, 0x6d, 0xb7, 0x85,
	0x2e, 0x37, 0x8f, 0xea, 0xa6, 0x8f, 0xdc, 0xe6, 0xb6, 0xe7, 0x36, 0xa8, 0x6f, 0xd7, 0xfc, 0xc0,
	0xe3, 0x1e, 0xc9, 0xc9, 0xd5, 0xda, 0x51, 0xbd, 0x3c, 0xdb, 0xf6, 0xbc, 0xb6, 0x83, 0x26, 0xf5,
	0x6d, 0x93, 0xba, 0xae, 0xc7, 0x69, 0xc8, 0x65, 0x92, 0x58, 0x9e, 0x57, 0xab, 0xe2, 0xed, 0xa0,
	0x7b, 0x68, 0xb6, 0xba, 0x81, 0x20, 0xa8, 0xf5, 0xa2, 0x72, 0xc3, 0x9e, 0x3a, 0xe1, 0x4f, 0xa1,
	0x0b, 0x0a, 0xa5, 0xdd, 0x96, 0x2d, 0x24, 0x04, 0xc8, 0xbc, 0x6e, 0xd0, 0xc4, 0xc8, 0x6c, 0xa9,
	0xaf, 0xee, 0xf4, 0x52, 0x64, 0xd1, 0xf1, 0xda, 0xe1, 0x4f, 0xa2, 0xc6, 0xdf, 0x1a, 0x14, 0x3f,
	0xb5, 0x19, 0xdf, 0x55, 0xb1, 0x30, 0x0b, 0x9f, 0x76, 0x91, 0x71, 0x32, 0x07, 0xc0, 0x7c, 0xda,
	0xc4, 0x86, 0x4b, 0x3b, 0xa8, 0x6b, 0x15, 0xad, 0x9a, 0xb3, 0x72, 0x02, 0xf9, 0x8c, 0x76, 0x90,
	0x14, 0x21, 0x43, 0x3b, 0x9e, 0xdb, 0xd6, 0xc7, 0x2a, 0xa3, 0xd5, 0x9c, 0x25, 0x5f, 0x08, 0x81,
	0xb1, 0xc3, 0xae, 0xe3, 0xe8, 0x57, 0x2a, 0x5a, 0x35, 0x6b, 0x89, 0x67, 0xb2, 0x04, 0x13, 0x0e,
	0x3d, 0x40, 0xa7, 0xc1, 0xd0, 0xc1, 0x26, 0xf7, 0x02, 0x1d, 0x84, 0xb1, 0x82, 0x40, 0xf7, 0x14,
	0x48, 0xde, 0x86, 0x9c, 0x4f, 0xdb, 0xd8, 0x60, 0xf6, 0x73, 0xd4, 0x57, 0x2b, 0x5a, 0x35, 0x63,
	0x65, 0x43, 0x60, 0xcf, 0x7e, 0x8e, 0xa1, 0x18, 0xb1, 0xc8, 0xbd, 0x27, 0xe8, 0xea, 0x77, 0xa4,
	0x98, 0x10, 0xf9, 0x3c, 0x04, 0xc8, 0x2c, 0xe4, 0x28, 0x6b, 0xa2, 0xdb, 0xb2, 0xdd, 0xb6, 0x7e,
	0x57, 0xf8, 0xee, 0x03, 0x46, 0x00, 0x33, 0xa7, 0x22, 0x64, 0xbe, 0xe7, 0x32, 0x24, 0x75, 0xc8,
	0x45, 0x25, 0x64, 0xba, 0x56, 0x19, 0xad, 0xe6, 0x57, 0xa7, 0x6b, 0xbd, 0x02, 0xd6, 0xa2, 0x0d,
	0x56, 0x9f, 0x45, 0x6e, 0xc0, 0xa4, 0x8b, 0x5f, 0xf3, 0x46, 0x4c, 0xcd, 0x88, 0x8c, 0x26, 0x84,
	0x77, 0x23, 0x45, 0xc6, 0x3e, 0x90, 0x2d, 0xec, 0xb9, 0x3c, 0x67, 0x4e, 0x17, 0xa1, 0xd0, 0x3b,
	0x52, 0x82, 0x21, 0x4d, 0x5f, 0x8d, 0xc0, 0x90, 0x64, 0xfc, 0xac, 0xc1, 0xcc, 0x46, 0x80, 0x94,
	0xe3, 0x05, 0xad, 0xd7, 0x60, 0xfa, 0x19, 0xb5, 0x79, 0xe3, 0xd0, 0x0b, 0x1a, 0x01, 0x1e, 0xd9,
	0xf8, 0x8c, 0x1e, 0x38, 0xa8, 0x17, 0x45, 0xba, 0xae, 0x85, 0x4b, 0x1f, 0x7b, 0x81, 0xd5, 0x5b,
	0x20, 0x26, 0x64, 0x23, 0xc7, 0x7a, 0xb5, 0xa2, 0x0d, 0x4b, 0x4e, 0x8f, 0x64, 0x7c, 0xa7, 0xc1,
	0xcc, 0x43, 0xbf, 0x75, 0x71, 0x65, 0x03, 0x71, 0x8f, 0x0e, 0xc6, 0x7d, 0x71, 0x39, 0x5f, 0xc2,
	0xcc, 0x26, 0x3a, 0xf8, 0xff, 0xd5, 0xa4, 0x55, 0x61, 0x0b, 0x8a, 0x7b, 0x9c, 0x06, 0x03, 0x15,
	0x8e, 0xab, 0x9c, 0x3c, 0x8f, 0xca, 0xdf, 0x47, 0x21, 0x1b, 0xc1, 0x44, 0x87, 0xb1, 0xbe, 0xa6,
	0xf5, 0xb1, 0xd7, 0xaf, 0x16, 0x34, 0x4b, 0x20, 0x64, 0x31, 0xa1, 0x39, 0x13, 0x5b, 0x8f, 0x29,
	0xbf, 0x09, 0x63, 0x1d, 0xe4, 0x54, 0x7c, 0x7d, 0xf9, 0xd5, 0x99, 0xc8, 0xb1, 0x68, 0x16, 0xa1,
	0xfb, 0x1d, 0xe4, 0xd4, 0x12, 0x14, 0x72, 0x1f, 0xf2, 0x91, 0x04, 0x0c, 0x98, 0x9e, 0x13, 0x87,
	0xbf, 0x34, 0xb0, 0xc3, 0x52, 0x3d, 0x44, 0xf9, 0x8a, 0xef, 0x21, 0xf7, 0x20, 0xd7, 0x6b, 0x31,
	0x7a, 0xfe, 0x7c, 0x06, 0xfa, 0x3b, 0xc8, 0x26, 0x4c, 0xb5, 0xf0, 0x90, 0x76, 0x1d, 0xde, 0x88,
	0x5a, 0x9f, 0x3e, 0x2d, 0x84, 0x97, 0x6a, 0xb2, 0x37, 0xd6, 0xa2, 0xde, 0x58, 0xdb, 0x54, 0x04,
	0x6b, 0x52, 0x6d, 0x89, 0x00, 0x72, 0x1d, 0xc6, 0x03, 0xa4, 0xcc, 0x73, 0xf5, 0x92, 0xa8, 0x92,
	0x7a, 0x23, 0xb7, 0x21, 0xc3, 0x38, 0xe5, 0xa8, 0xcf, 0x0b, 0x93, 0x7a, 0x4a, 0x11, 0xf6, 0xc2,
	0x75, 0xa5, 0x4b, 0x92, 0xc9, 0x0a, 0x64, 0x0e, 0x1c, 0xaf, 0xf9, 0x44, 0xf4, 0x9f, 0xfc, 0xea,
	0x54, 0x6c, 0xd7, 0x7a, 0x88, 0x47, 0x6c, 0x41, 0x32, 0xfe, 0xd0, 0xa0, 0x90, 0x30, 0x46, 0xee,
	0xc0, 0x78, 0x68, 0xa8, 0xcb, 0x44, 0x8b, 0x8b, 0xe5, 0xe3, 0x94, 0xdb, 0x2e, 0x53, 0x96, 0x14,
	0x9d, 0xac, 0xc1, 0x55, 0x3c, 0x42, 0x97, 0x7f, 0x62, 0x33, 0xee, 0x05, 0xdf, 0xe8, 0x45, 0x91,
	0xce, 0xeb, 0x03, 0xe9, 0x7c, 0x10, 0x92, 0xac, 0x04, 0x97, 0xdc, 0x86, 0x6c, 0x07, 0x19, 0xa3,
	0x6d, 0x64, 0xfa, 0xbc, 0xd8, 0x17, 0x8f, 0x76, 0x83, 0xba, 0x2e, 0xb6, 0x76, 0x24, 0xc1, 0xea,
	0x31, 0x8d, 0x2d, 0x28, 0x24, 0x96, 0x88, 0x0e, 0x57, 0x9a, 0x8f, 0x43, 0xc4, 0x51, 0xfd, 0x39,
	0x7a, 0x0d, 0xbb, 0x2b, 0xb7, 0x3b, 0xc8, 0x38, 0xed, 0xf8, 0xe2, 0x50, 0xe7, 0xac, 0x3e, 0x60,
	0xac, 0xc0, 0x44, 0x32, 0x34, 0x52, 0x86, 0x8c, 0xff, 0x98, 0x32, 0x94, 0x76, 0xa2, 0x9c, 0x09,
	0xc8, 0x78, 0xa5, 0x41, 0x29, 0xde, 0x8c, 0x37, 0x1c, 0x6a, 0x77, 0x86, 0xcc, 0x9c, 0xc2, 0x99,
	0x5f, 0xe6, 0xb5, 0x94, 0x3e, 0x31, 0x38, 0x6e, 0x4a, 0x6f, 0x78, 0xdc, 0x18, 0x1c, 0xca, 0x69,
	0x31, 0xa8, 0xa9, 0x52, 0x83, 0xf1, 0xa6, 0x40, 0xd4, 0x48, 0x19, 0x56, 0x45, 0xc5, 0x3a, 0xf7,
	0x48, 0x79, 0x01, 0x6f, 0xc5, 0x46, 0x8a, 0x70, 0x7a, 0xd9, 0x8e, 0x96, 0x49, 0xc9, 0xdb, 0x1c,
	0x80, 0x10, 0x24, 0x19, 0x45, 0x69, 0x43, 0x20, 0xa2, 0xe1, 0x7d, 0xaf, 0x41, 0x39, 0x39, 0x76,
	0xde, 0xb8, 0x82, 0x15, 0xc8, 0x08, 0x7f, 0xaa, 0xbd, 0x0f, 0xcb, 0x9b, 0x24, 0xad, 0xbe, 0xce,
	0x42, 0x3e, 0x92, 0x72, 0x7f, 0x77, 0x9b, 0x9c, 0x40, 0x21, 0x31, 0xe5, 0xc9, 0x42, 0xec, 0x2b,
	0x48, 0xbb, 0xe1, 0x94, 0x2b, 0xc3, 0x09, 0xb2, 0x94, 0xc6, 0xcd, 0x97, 0x7f, 0xfd, 0xf3, 0xe3,
	0xc8, 0x22, 0x79, 0x27, 0xbc, 0x4f, 0x89, 0x68, 0x98, 0x79, 0xdc, 0x8f, 0xf3, 0xc4, 0xec, 0x5f,
	0x0c, 0x5e, 0x40, 0x3e, 0x56, 0x1d, 0x32, 0x17, 0xb3, 0x3d, 0x78, 0x11, 0x28, 0xa7, 0x0d, 0x05,
	0xe3, 0x03, 0xe1, 0xed, 0x16, 0xa9, 0x9f, 0xe9, 0xcd, 0x3c, 0x4e, 0x64, 0xf3, 0x84, 0x74, 0x61,
	0x22, 0x59, 0x1c, 0x12, 0x0f, 0x2e, 0xf5, 0xba, 0x90, 0xae, 0x61, 0x45, 0x68, 0xb8, 0x61, 0x9c,
	0x1d, 0xf1, 0x9a, 0xb6, 0x4c, 0xbe, 0xd5, 0x60, 0x22, 0x39, 0xf1, 0x13, 0x7e, 0x53, 0x2f, 0x03,
	0xe9, 0x7e, 0xef, 0x0a, 0xbf, 0xef, 0x95, 0x2f, 0x1e, 0x7b, 0xa8, 0xe3, 0xa5, 0x06, 0x13, 0xc9,
	0x59, 0x9f, 0xd0, 0x91, 0x7a, 0x0d, 0xf8, 0xcf, 0x1a, 0x2c, 0x5f, 0xa2, 0x06, 0xbf, 0x68, 0x00,
	0xe1, 0x31, 0x92, 0xed, 0x80, 0xbc, 0x3b, 0xe4, 0x74, 0x25, 0x3a, 0x5e, 0x79, 0xe9, 0x0c, 0x96,
	0x3a, 0x88, 0x1f, 0x09, 0x59, 0x6b, 0xe4, 0xfd, 0x0b, 0xcb, 0x32, 0x55, 0x97, 0xf9, 0x49, 0x83,
	0xec, 0x16, 0x4a, 0x71, 0xc4, 0x48, 0x3f, 0x9d, 0xf1, 0x2f, 0xba, 0x3c, 0xe4, 0xf3, 0x33, 0x76,
	0x84, 0x94, 0x2d, 0xf2, 0xe0, 0xb2, 0x52, 0xcc, 0xe3, 0x7e, 0x9f, 0x39, 0x21, 0x3f, 0x68, 0x90,
	0x97, 0xe7, 0x53, 0x4a, 0x5b, 0x1a, 0x7a, 0x6e, 0xcf, 0xa5, 0x6e, 0x43, 0xa8, 0xbb, 0x67, 0x5c,
	0x3a, 0x51, 0x6b, 0xda, 0xf2, 0xfa, 0x43, 0x28, 0x34, 0xbd, 0x4e, 0x5f, 0xc8, 0xfa, 0x54, 0xaf,
	0xd1, 0xf8, 0xf6, 0x6e, 0x78, 0x29, 0xd9, 0xd5, 0xbe, 0x20, 0xbd, 0x7f, 0x5a, 0x1f, 0xca, 0xa7,
	0xa3, 0xfa, 0xaf, 0x23, 0xa3, 0xdb, 0xfb, 0xfb, 0xbf, 0x8d, 0xe4, 0xb6, 0xe5, 0xce, 0x47, 0xf5,
	0x3f, 0xa3, 0xe7, 0xaf, 0x1e, 0xd5, 0x0f, 0xc6, 0xc5, 0x7d, 0xe6, 0xd6, 0xbf, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x34, 0x23, 0x56, 0x95, 0x42, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PetitionAPIClient is the client API for PetitionAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PetitionAPIClient interface {
	// List the Petitions in the given space including ones that have been approved or withdrawn.
	ListPetitions(ctx context.Context, in *ListPetitionsRequest, opts ...grpc.CallOption) (*ListPetitionsResponse, error)
	// Retrieve specified Petition by name and space.
	GetPetition(ctx context.Context, in *GetPetitionRequest, opts ...grpc.CallOption) (*Petition, error)
	// Create a new Petition within a space requesting access to specified resources.
	CreatePetition(ctx context.Context, in *CreatePetitionRequest, opts ...grpc.CallOption) (*Petition, error)
	// UpdatePetition allows modification of the contents of a Petition.
	UpdatePetition(ctx context.Context, in *UpdatePetitionRequest, opts ...grpc.CallOption) (*Petition, error)
	// Permanently destroy a Petition.
	DeletePetition(ctx context.Context, in *DeletePetitionRequest, opts ...grpc.CallOption) (*Petition, error)
	// List the Claims in the given petition in a space.
	ListClaims(ctx context.Context, in *ListPetitionClaimsRequest, opts ...grpc.CallOption) (*ListPetitionClaimsResponse, error)
	// Retrieve specified Claim by name and space.
	GetClaim(ctx context.Context, in *GetPetitionClaimRequest, opts ...grpc.CallOption) (*v1.Event, error)
	// Create a new Claim for a Petition.
	CreateClaim(ctx context.Context, in *CreatePetitionClaimRequest, opts ...grpc.CallOption) (*v1.Event, error)
}

type petitionAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPetitionAPIClient(cc grpc.ClientConnInterface) PetitionAPIClient {
	return &petitionAPIClient{cc}
}

func (c *petitionAPIClient) ListPetitions(ctx context.Context, in *ListPetitionsRequest, opts ...grpc.CallOption) (*ListPetitionsResponse, error) {
	out := new(ListPetitionsResponse)
	err := c.cc.Invoke(ctx, "/indent.v1.PetitionAPI/ListPetitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petitionAPIClient) GetPetition(ctx context.Context, in *GetPetitionRequest, opts ...grpc.CallOption) (*Petition, error) {
	out := new(Petition)
	err := c.cc.Invoke(ctx, "/indent.v1.PetitionAPI/GetPetition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petitionAPIClient) CreatePetition(ctx context.Context, in *CreatePetitionRequest, opts ...grpc.CallOption) (*Petition, error) {
	out := new(Petition)
	err := c.cc.Invoke(ctx, "/indent.v1.PetitionAPI/CreatePetition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petitionAPIClient) UpdatePetition(ctx context.Context, in *UpdatePetitionRequest, opts ...grpc.CallOption) (*Petition, error) {
	out := new(Petition)
	err := c.cc.Invoke(ctx, "/indent.v1.PetitionAPI/UpdatePetition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petitionAPIClient) DeletePetition(ctx context.Context, in *DeletePetitionRequest, opts ...grpc.CallOption) (*Petition, error) {
	out := new(Petition)
	err := c.cc.Invoke(ctx, "/indent.v1.PetitionAPI/DeletePetition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petitionAPIClient) ListClaims(ctx context.Context, in *ListPetitionClaimsRequest, opts ...grpc.CallOption) (*ListPetitionClaimsResponse, error) {
	out := new(ListPetitionClaimsResponse)
	err := c.cc.Invoke(ctx, "/indent.v1.PetitionAPI/ListClaims", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petitionAPIClient) GetClaim(ctx context.Context, in *GetPetitionClaimRequest, opts ...grpc.CallOption) (*v1.Event, error) {
	out := new(v1.Event)
	err := c.cc.Invoke(ctx, "/indent.v1.PetitionAPI/GetClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petitionAPIClient) CreateClaim(ctx context.Context, in *CreatePetitionClaimRequest, opts ...grpc.CallOption) (*v1.Event, error) {
	out := new(v1.Event)
	err := c.cc.Invoke(ctx, "/indent.v1.PetitionAPI/CreateClaim", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetitionAPIServer is the server API for PetitionAPI service.
type PetitionAPIServer interface {
	// List the Petitions in the given space including ones that have been approved or withdrawn.
	ListPetitions(context.Context, *ListPetitionsRequest) (*ListPetitionsResponse, error)
	// Retrieve specified Petition by name and space.
	GetPetition(context.Context, *GetPetitionRequest) (*Petition, error)
	// Create a new Petition within a space requesting access to specified resources.
	CreatePetition(context.Context, *CreatePetitionRequest) (*Petition, error)
	// UpdatePetition allows modification of the contents of a Petition.
	UpdatePetition(context.Context, *UpdatePetitionRequest) (*Petition, error)
	// Permanently destroy a Petition.
	DeletePetition(context.Context, *DeletePetitionRequest) (*Petition, error)
	// List the Claims in the given petition in a space.
	ListClaims(context.Context, *ListPetitionClaimsRequest) (*ListPetitionClaimsResponse, error)
	// Retrieve specified Claim by name and space.
	GetClaim(context.Context, *GetPetitionClaimRequest) (*v1.Event, error)
	// Create a new Claim for a Petition.
	CreateClaim(context.Context, *CreatePetitionClaimRequest) (*v1.Event, error)
}

// UnimplementedPetitionAPIServer can be embedded to have forward compatible implementations.
type UnimplementedPetitionAPIServer struct {
}

func (*UnimplementedPetitionAPIServer) ListPetitions(ctx context.Context, req *ListPetitionsRequest) (*ListPetitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPetitions not implemented")
}
func (*UnimplementedPetitionAPIServer) GetPetition(ctx context.Context, req *GetPetitionRequest) (*Petition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPetition not implemented")
}
func (*UnimplementedPetitionAPIServer) CreatePetition(ctx context.Context, req *CreatePetitionRequest) (*Petition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePetition not implemented")
}
func (*UnimplementedPetitionAPIServer) UpdatePetition(ctx context.Context, req *UpdatePetitionRequest) (*Petition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePetition not implemented")
}
func (*UnimplementedPetitionAPIServer) DeletePetition(ctx context.Context, req *DeletePetitionRequest) (*Petition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePetition not implemented")
}
func (*UnimplementedPetitionAPIServer) ListClaims(ctx context.Context, req *ListPetitionClaimsRequest) (*ListPetitionClaimsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClaims not implemented")
}
func (*UnimplementedPetitionAPIServer) GetClaim(ctx context.Context, req *GetPetitionClaimRequest) (*v1.Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClaim not implemented")
}
func (*UnimplementedPetitionAPIServer) CreateClaim(ctx context.Context, req *CreatePetitionClaimRequest) (*v1.Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClaim not implemented")
}

func RegisterPetitionAPIServer(s *grpc.Server, srv PetitionAPIServer) {
	s.RegisterService(&_PetitionAPI_serviceDesc, srv)
}

func _PetitionAPI_ListPetitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPetitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetitionAPIServer).ListPetitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indent.v1.PetitionAPI/ListPetitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetitionAPIServer).ListPetitions(ctx, req.(*ListPetitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetitionAPI_GetPetition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetitionAPIServer).GetPetition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indent.v1.PetitionAPI/GetPetition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetitionAPIServer).GetPetition(ctx, req.(*GetPetitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetitionAPI_CreatePetition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePetitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetitionAPIServer).CreatePetition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indent.v1.PetitionAPI/CreatePetition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetitionAPIServer).CreatePetition(ctx, req.(*CreatePetitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetitionAPI_UpdatePetition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePetitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetitionAPIServer).UpdatePetition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indent.v1.PetitionAPI/UpdatePetition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetitionAPIServer).UpdatePetition(ctx, req.(*UpdatePetitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetitionAPI_DeletePetition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePetitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetitionAPIServer).DeletePetition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indent.v1.PetitionAPI/DeletePetition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetitionAPIServer).DeletePetition(ctx, req.(*DeletePetitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetitionAPI_ListClaims_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPetitionClaimsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetitionAPIServer).ListClaims(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indent.v1.PetitionAPI/ListClaims",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetitionAPIServer).ListClaims(ctx, req.(*ListPetitionClaimsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetitionAPI_GetClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetitionClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetitionAPIServer).GetClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indent.v1.PetitionAPI/GetClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetitionAPIServer).GetClaim(ctx, req.(*GetPetitionClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetitionAPI_CreateClaim_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePetitionClaimRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetitionAPIServer).CreateClaim(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indent.v1.PetitionAPI/CreateClaim",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetitionAPIServer).CreateClaim(ctx, req.(*CreatePetitionClaimRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PetitionAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "indent.v1.PetitionAPI",
	HandlerType: (*PetitionAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPetitions",
			Handler:    _PetitionAPI_ListPetitions_Handler,
		},
		{
			MethodName: "GetPetition",
			Handler:    _PetitionAPI_GetPetition_Handler,
		},
		{
			MethodName: "CreatePetition",
			Handler:    _PetitionAPI_CreatePetition_Handler,
		},
		{
			MethodName: "UpdatePetition",
			Handler:    _PetitionAPI_UpdatePetition_Handler,
		},
		{
			MethodName: "DeletePetition",
			Handler:    _PetitionAPI_DeletePetition_Handler,
		},
		{
			MethodName: "ListClaims",
			Handler:    _PetitionAPI_ListClaims_Handler,
		},
		{
			MethodName: "GetClaim",
			Handler:    _PetitionAPI_GetClaim_Handler,
		},
		{
			MethodName: "CreateClaim",
			Handler:    _PetitionAPI_CreateClaim_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "indent/v1/petition_api.proto",
}
